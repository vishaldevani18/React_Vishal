{"version":3,"sources":["Css/Style.module.css","serviceWorker.js","HOC/Wrapped.js","Components/DisplayComponent.js","Components/User.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","Wrapped","DisplayComponent","isLoaded","props","className","Style","SpinnerDiv","Spinner","animation","variant","Loader","TableDiv","Table","striped","bordered","hover","responsive","users","map","item","key","id","Name","Age","City","useState","setIsLoaded","useEffect","timer","setTimeout","clearTimeout","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wJACAA,EAAOC,QAAU,CAAC,WAAa,0BAA0B,SAAW,0B,iFCWhDC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,gDCASC,MAdf,SAAiBC,GACb,OAAO,YAA8B,IAApBC,EAAmB,EAAnBA,SAAYC,EAAO,4BAChC,OAAGD,EACQ,kBAACD,EAAqBE,GAG7B,yBAAKC,UAAWC,IAAMC,YAClB,kBAACC,EAAA,EAAD,CAASC,UAAU,SAASC,QAAQ,YACpC,yD,QCNVC,EAASV,GCHF,SAACG,GACV,OACI,yBAAKC,UAAWC,IAAMM,UAClB,4CAEA,kBAACC,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAACC,YAAU,GACxC,+BACI,4BACI,kCACA,oCACA,mCACA,sCAGJ,+BACCb,EAAMc,MAAMC,KAAI,SAAAC,GAAI,OACjB,wBAAIC,IAAKD,EAAKE,IACV,4BAAKF,EAAKE,IACV,4BAAKF,EAAKG,MACV,4BAAKH,EAAKI,KACV,4BAAKJ,EAAKK,gBDOnBvB,EAvBU,WAAM,IAAD,EAEMwB,oBAAS,GAFf,mBAEnBvB,EAFmB,KAETwB,EAFS,OAGDD,mBAAS,CAC9B,CAAEJ,GAAI,EAAGC,KAAM,gBAAiBC,IAAK,KAAMC,KAAM,UACjD,CAAEH,GAAI,EAAGC,KAAM,gBAAiBC,IAAK,KAAMC,KAAM,UACjD,CAAEH,GAAI,EAAGC,KAAM,aAAcC,IAAK,KAAMC,KAAM,eANxB,mBAGnBP,EAHmB,UAiBtB,OARJU,qBAAU,WACN,IAAMC,EAAQC,YAAW,WACrBH,GAAY,KACX,KACH,OAAO,kBAAMI,aAAaF,MAC7B,IAIK,kBAAClB,EAAD,CAAQR,UAAWA,EAAUe,MAAOA,KEjBhDc,IAASC,OAAO,kBAAC,EAAD,MAAqBC,SAASC,eAAe,SJ2HvD,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.366fc964.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"SpinnerDiv\":\"Style_SpinnerDiv__u3Ht_\",\"TableDiv\":\"Style_TableDiv__3jrPK\"};","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport Style from '../Css/Style.module.css';\r\n\r\nfunction Wrapped(DisplayComponent){\r\n    return function({isLoaded,...props}){\r\n        if(isLoaded){\r\n            return <DisplayComponent {...props}/>\r\n        }\r\n        return(\r\n            <div className={Style.SpinnerDiv}>\r\n                <Spinner animation=\"border\" variant=\"primary\" />\r\n                <span>Wait Wile Loading...</span>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Wrapped;","import React from 'react';\r\nimport Wrapped from '../HOC/Wrapped'\r\nimport { useEffect } from 'react';\r\nimport { useState } from 'react';\r\nimport User from '../Components/User';\r\n\r\nconst Loader = Wrapped(User)\r\nconst DisplayComponent = () =>{\r\n\r\n    const [isLoaded, setIsLoaded] = useState(true);\r\n    const [users, setItem] = useState([ \r\n        { id: 1, Name: 'Vishal Devani', Age: '15', City: 'Amreli' },\r\n        { id: 2, Name: 'Devani Vishal', Age: '16', City: 'Amreli' },\r\n        { id: 3, Name: 'Mihir Shah', Age: '22', City: 'Ahmedavad' }, \r\n]);\r\n\r\n    useEffect(() => {\r\n        const timer = setTimeout(() => {\r\n            setIsLoaded(false);\r\n          }, 2000);\r\n          return () => clearTimeout(timer);\r\n    }, [])\r\n    \r\n  \r\n        return(\r\n            <Loader isLoaded={!isLoaded} users={users}/>\r\n        )\r\n\r\n}\r\n\r\nexport default DisplayComponent;","import React from 'react';\r\nimport Table from 'react-bootstrap/Table';\r\nimport Style from '../Css/Style.module.css';\r\nconst User = (props) => {\r\n    return (\r\n        <div className={Style.TableDiv}>\r\n            <h4>(day-12 HOC)</h4>\r\n\r\n            <Table striped bordered hover responsive >\r\n            <thead>\r\n                <tr>\r\n                    <th>ID</th>\r\n                    <th>Name</th>\r\n                    <th>Age</th>\r\n                    <th>City</th>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                {props.users.map(item => (\r\n                    <tr key={item.id}>\r\n                        <td>{item.id}</td>\r\n                        <td>{item.Name}</td>\r\n                        <td>{item.Age}</td>\r\n                        <td>{item.City}</td>\r\n                    </tr>\r\n                ))}\r\n                </tbody>\r\n            </Table>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default User;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport DisplayComponent from './Components/DisplayComponent';\r\n\r\n\r\nReactDOM.render(<DisplayComponent/>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}