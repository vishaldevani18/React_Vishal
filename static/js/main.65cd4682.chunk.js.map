{"version":3,"sources":["Components/ResponsiveWindow.js","serviceWorker.js","index.js","Components/Css/Style.module.css"],"names":["ResponsiveWindow","useState","window","innerWidth","windowWidth","setWindowWidth","displayType","setDisplayType","checked","setChecked","show","setShow","SwitchComponent","className","Style","switchComponentDiv","Button","onClick","Toast","onClose","delay","autohide","Header","Body","innerHeight","SelectDisplayType","props","type","DisplayWindow","DisplayTablet","DisplayMobile","screenTypeIcon","aria-hidden","useEffect","getCurrentWindowWidth","currentWidth","addEventListener","removeEventListener","firstDiv","Alert","variant","thirdDiv","Card","border","style","width","height","btnSwitch","onChange","id","switchDiv","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"+SA2MeA,MAlMf,WAA6B,IAAD,EAEcC,mBAASC,OAAOC,YAF9B,mBAEjBC,EAFiB,KAEJC,EAFI,OAGcJ,mBAAS,WAHvB,mBAGjBK,EAHiB,KAGJC,EAHI,OAIMN,oBAAS,GAJf,mBAIjBO,EAJiB,KAIRC,EAJQ,OAKAR,oBAAS,GALT,mBAKjBS,EALiB,KAKXC,EALW,KAaxB,SAASC,IAGL,OAEI,yBAAKC,UAAWC,IAAMC,oBAClB,6BACI,kBAACC,EAAA,EAAD,CAAQC,QAAS,kBAAMN,GAAQ,KAA/B,YAEJ,6BAGI,kBAACO,EAAA,EAAD,CAAOC,QAAS,kBAAMR,GAAQ,IAAQD,KAAMA,EAAMU,MAAO,IAAMC,UAAQ,GACnE,kBAACH,EAAA,EAAMI,OAAP,KAEI,4BAAQT,UAAU,WAAlB,mBAGJ,kBAACK,EAAA,EAAMK,KAAP,kCAAuCjB,EAEnC,4CAAkBJ,OAAOC,YACzB,6CAAmBD,OAAOsB,aAC1B,2CAAiBlB,OAkBzC,SAASmB,EAAkBC,GACvB,OAAQA,EAAMC,MAGV,IAAK,UACD,OAAO,kBAACC,EAAD,MAEX,IAAK,SACD,OAAO,kBAACC,EAAD,MACX,IAAK,SACD,OAAO,kBAACC,EAAD,MAEX,QACI,OAAO,6BAAM5B,OAAOC,aAOhC,SAASyB,IAEL,OACI,yBAAKf,UAAWC,IAAMiB,gBAClB,6BAEI,uBAAGlB,UAAU,gBAAgBmB,cAAY,UAE7C,gDACoB,sCADpB,iBAQZ,SAASH,IAGL,OACI,yBAAKhB,UAAWC,IAAMiB,gBAClB,6BAEI,uBAAGlB,UAAU,eAAemB,cAAY,UAE5C,gDACoB,qCADpB,iBASZ,SAASF,IAEL,OACI,yBAAKjB,UAAWC,IAAMiB,gBAClB,6BAEI,uBAAGlB,UAAU,eAAemB,cAAY,UAE5C,gDACoB,qCADpB,UAsCZ,OA5BAC,qBAAU,WAGN,SAASC,IAEL,IAAMC,EAAejC,OAAOC,WAC5BE,EAAe8B,GAGX5B,EAFA4B,GAAgB,MAAQA,GAAgB,KAEzB,UAIVA,GAAgB,KAAOA,GAAgB,KAE7B,SAIA,UAMvB,OAFAjC,OAAOkC,iBAAiB,SAAUF,GAE3B,WAAQhC,OAAOmC,oBAAoB,SAAUH,MACrD,CAAC9B,IAGA,6BACI,yBAAKS,UAAWC,IAAMwB,UAClB,kBAACC,EAAA,EAAD,CAAOC,QAAQ,QAAf,gFAMJ,yBAAK3B,UAAWC,IAAM2B,UAClB,kBAACC,EAAA,EAAD,CAAMC,OAAO,UAAUC,MAAO,CAAEC,MAAO,QAASC,OAAQ,UACpD,kBAACJ,EAAA,EAAKnB,KAAN,KACI,yBAAKV,UAAWC,IAAMiB,gBAClB,kBAACN,EAAD,CAAmBE,KAAMrB,KAGR,WAAhBA,GACL,yBAAKO,UAAWC,IAAMiC,WAClB,kBAAC,IAAD,CACIC,SArK5B,SAAsBxC,GAElBC,EAAWD,IAoKaA,QAASA,EACTK,UAAU,eACVoC,GAAG,mBAIX,yBAAKpC,UAAWC,IAAMoC,WAEhB1C,GAAY,kBAACI,EAAD,YClLtBuC,QACW,cAA7BjD,OAAOkD,SAASC,UAEe,UAA7BnD,OAAOkD,SAASC,UAEhBnD,OAAOkD,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBExI5BC,EAAOC,QAAU,CAAC,SAAW,wBAAwB,UAAY,yBAAyB,SAAW,wBAAwB,eAAiB,8BAA8B,UAAY,yBAAyB,UAAY,yBAAyB,mBAAqB,qC","file":"static/js/main.65cd4682.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport Style from './Css/Style.module.css';\r\nimport 'font-awesome/css/font-awesome.min.css';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Switch from \"react-switch\";\r\nimport Toast from 'react-bootstrap/Toast'\r\nimport Button from 'react-bootstrap/Button'\r\n\r\nfunction ResponsiveWindow() {\r\n\r\n    const [windowWidth, setWindowWidth] = useState(window.innerWidth);\r\n    const [displayType, setDisplayType] = useState(\"desktop\");\r\n    const [checked, setChecked] = useState(false)\r\n    const [show, setShow] = useState(false);\r\n\r\n    function handleChange(checked) {\r\n\r\n        setChecked(checked);\r\n\r\n    }\r\n\r\n    function SwitchComponent() {\r\n\r\n\r\n        return (\r\n\r\n            <div className={Style.switchComponentDiv}>\r\n                <div>\r\n                    <Button onClick={() => setShow(true)}>Show Me</Button>\r\n                </div>\r\n                <div>\r\n\r\n\r\n                    <Toast onClose={() => setShow(false)} show={show} delay={3000} autohide>\r\n                        <Toast.Header>\r\n\r\n                            <strong className=\"mr-auto\">Screen Details</strong>\r\n\r\n                        </Toast.Header>\r\n                        <Toast.Body>Woohoo, you're reading on {displayType}\r\n\r\n                            <p>Screen Width: {window.innerWidth}</p>\r\n                            <p>Screen Height: {window.innerHeight}</p>\r\n                            <p>Device Type: {displayType}</p>\r\n\r\n                        </Toast.Body>\r\n                    </Toast>\r\n\r\n\r\n                </div>\r\n\r\n\r\n\r\n            </div>\r\n\r\n        )\r\n\r\n\r\n    }\r\n\r\n\r\n    function SelectDisplayType(props) {\r\n        switch (props.type) {\r\n\r\n\r\n            case 'desktop':\r\n                return <DisplayWindow />\r\n\r\n            case 'tablet':\r\n                return <DisplayTablet />\r\n            case 'mobile':\r\n                return <DisplayMobile />\r\n\r\n            default:\r\n                return <div>{window.innerWidth}</div>\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n    function DisplayWindow() {\r\n\r\n        return (\r\n            <div className={Style.screenTypeIcon}>\r\n                <div>\r\n\r\n                    <i className=\"fa fa-desktop\" aria-hidden=\"true\"></i>\r\n                </div>\r\n                <div>\r\n                    You Are Viewing <b>Desktop</b> screen mode\r\n            </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n    function DisplayTablet() {\r\n\r\n       \r\n        return (\r\n            <div className={Style.screenTypeIcon}>\r\n                <div>\r\n\r\n                    <i className=\"fa fa-tablet\" aria-hidden=\"true\"></i>\r\n                </div>\r\n                <div>\r\n                    You Are Viewing <b>Tablet</b> screen mode\r\n            </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n\r\n    function DisplayMobile() {\r\n\r\n        return (\r\n            <div className={Style.screenTypeIcon}>\r\n                <div>\r\n\r\n                    <i className=\"fa fa-mobile\" aria-hidden=\"true\"></i>\r\n                </div>\r\n                <div>\r\n                    You Are Viewing <b>Mobile</b> mode\r\n            </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n\r\n\r\n    useEffect(() => {\r\n\r\n       \r\n        function getCurrentWindowWidth() {\r\n\r\n            const currentWidth = window.innerWidth;\r\n            setWindowWidth(currentWidth);\r\n            if (currentWidth >= 1025 && currentWidth <= 1366) {\r\n\r\n                setDisplayType(\"desktop\");\r\n\r\n            }\r\n\r\n            else if (currentWidth >= 768 && currentWidth <= 1024) {\r\n\r\n                setDisplayType(\"tablet\");\r\n            }\r\n            else {\r\n\r\n                setDisplayType(\"mobile\");\r\n            }\r\n        }\r\n\r\n        window.addEventListener(\"resize\", getCurrentWindowWidth);\r\n\r\n        return () => { window.removeEventListener(\"resize\", getCurrentWindowWidth) }\r\n    }, [windowWidth])\r\n\r\n    return (\r\n        <div>\r\n            <div className={Style.firstDiv}>\r\n                <Alert variant=\"info\">\r\n\r\n                    Welcome To Screen Type Checker. change your screen size to see the effects.\r\n                </Alert>\r\n            </div>\r\n           \r\n            <div className={Style.thirdDiv}>\r\n                <Card border=\"primary\" style={{ width: '50rem', height: '30rem' }}>\r\n                    <Card.Body>\r\n                        <div className={Style.screenTypeIcon}>\r\n                            <SelectDisplayType type={displayType} />\r\n                        </div>\r\n                        {\r\n                            (displayType !== 'mobile') &&\r\n                        <div className={Style.btnSwitch}>\r\n                            <Switch\r\n                                onChange={handleChange}\r\n                                checked={checked}\r\n                                className=\"react-switch\"\r\n                                id=\"normal-switch\"\r\n                            />\r\n                        </div>\r\n                        }\r\n                        <div className={Style.switchDiv}>\r\n\r\n                            {(checked) && <SwitchComponent />\r\n                            }\r\n                        </div>\r\n                    </Card.Body>\r\n                </Card>\r\n\r\n                {/* <SelectDisplayType type={displayType} /> */}\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ResponsiveWindow\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React  from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\nimport ResponsiveWindow from './Components/ResponsiveWindow'\r\nimport * as serviceWorker from './serviceWorker';\r\nReactDOM.render(\r\n  <ResponsiveWindow/>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"firstDiv\":\"Style_firstDiv__2vY0x\",\"secondDiv\":\"Style_secondDiv__2R-Oc\",\"thirdDiv\":\"Style_thirdDiv__2W6Uz\",\"screenTypeIcon\":\"Style_screenTypeIcon__qb9Nx\",\"btnSwitch\":\"Style_btnSwitch__2A0X4\",\"switchDiv\":\"Style_switchDiv__1kM_r\",\"switchComponentDiv\":\"Style_switchComponentDiv__2oou_\"};"],"sourceRoot":""}