{"version":3,"sources":["serviceWorker.js","Components/DataList.js","index.js","Components/Css/List.module.css","logo.svg"],"names":["Boolean","window","location","hostname","match","UsersNameList","props","className","styles","firstDiv","name","Button","variant","onClick","click","Users","id","city","age","DataList","toggleUserHandler","setState","UsersId","state","Name","Age","City","isLoading","console","log","this","timerHandle","setTimeout","user","Container","secondDiv","filter","map","key","spinnerDiv","Spinner","animation","mainDiv","Jumbotron","fluid","React","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"uPAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mFCVN,SAASC,EAAcC,GACnB,OAEI,6BAEI,yBAAKC,UAAWC,IAAOC,UACnB,+BAAQH,EAAMI,MACd,kBAACC,EAAA,EAAD,CAAQC,QAAQ,UAAUC,QAASP,EAAMQ,OAAzC,cAIJ,8BAIZ,SAASC,EAAMT,GACX,OACI,6BACI,4BAAKA,EAAMI,MACX,qCAAWJ,EAAMU,IACjB,uCAAaV,EAAMI,MACnB,mCAASJ,EAAMW,MACf,iCAAOX,EAAMY,M,IA2EVC,E,kDAtEX,WAAYb,GAAQ,IAAD,8BACf,cAAMA,IAWVc,kBAAoB,SAACJ,GAEjB,EAAKK,SAAS,CAAEC,QAASN,KAZzB,EAAKO,MAAQ,CACTR,MAAO,CACH,CAAEC,GAAI,EAAGQ,KAAM,gBAAiBC,IAAK,KAAMC,KAAM,UACjD,CAAEV,GAAI,EAAGQ,KAAM,gBAAiBC,IAAK,KAAMC,KAAM,UACjD,CAAEV,GAAI,EAAGQ,KAAM,aAAcC,IAAK,KAAMC,KAAM,cAC/CJ,QAAS,EACZK,WAAW,GARA,E,gEAgBE,IAAD,OAEhBC,QAAQC,IAAI,QAEZC,KAAKC,YAAcC,YAAW,kBAAM,EAAKX,SAAS,CAAEM,WAAW,MAAU,O,+BAKnE,IAEFM,EAFC,OAsBL,OAnBAA,EAGI,kBAACC,EAAA,EAAD,KACI,yBAAK3B,UAAWC,IAAO2B,WAEnBL,KAAKP,MAAMR,MAAMqB,QAAO,SAACH,GAAD,OAAUA,EAAKjB,KAAO,EAAKO,MAAMD,WAASe,KAAI,SAACJ,GACnE,OAAO,kBAAClB,EAAD,CACHuB,IAAKL,EAAKjB,GACVN,KAAMuB,EAAKT,KACXP,KAAMgB,EAAKP,KACXV,GAAIiB,EAAKjB,GACTE,IAAKe,EAAKR,WAQ1BK,KAAKP,MAAMI,UAAY,yBAAKpB,UAAWC,IAAO+B,YAAvB,IAAoC,kBAACC,EAAA,EAAD,CAASC,UAAU,SAAS7B,QAAQ,YAAxE,gBACnB,yBAAKL,UAAWC,IAAOkC,SACnB,kBAACC,EAAA,EAAD,CAAWC,OAAK,GACZ,kBAACV,EAAA,EAAD,KAEQJ,KAAKP,MAAMR,MAAMsB,KAAI,SAACJ,GAAD,OACjB,kBAAC5B,EAAD,CACIiC,IAAKL,EAAKjB,GACVN,KAAMuB,EAAKT,KAEXV,MAAO,kBAAM,EAAKM,kBAAkBa,EAAKjB,YAM5DiB,O,GAjEEY,IAAMC,W,MC3B7BC,IAASC,OAEL,kBAAC,EAAD,MAAaC,SAASC,eAAe,SF0HnC,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,a,kBGxI5BC,EAAOC,QAAU,CAAC,QAAU,sBAAsB,SAAW,uBAAuB,UAAY,wBAAwB,WAAa,2B,kBCDrID,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.98de221e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react'\r\nimport Jumbotron from 'react-bootstrap/Jumbotron'\r\nimport Container from 'react-bootstrap/Container'\r\nimport Button from 'react-bootstrap/Button'\r\nimport styles from './Css/List.module.css'\r\nimport Spinner from 'react-bootstrap/Spinner'\r\n// List Of Users Components\r\n\r\nfunction UsersNameList(props) {\r\n    return (\r\n\r\n        <div>\r\n\r\n            <div className={styles.firstDiv}>\r\n                <label>{props.name}</label>\r\n                <Button variant=\"primary\" onClick={props.click} >\r\n                    Show more</Button>\r\n\r\n            </div>\r\n            <hr />\r\n        </div>\r\n    )\r\n}\r\nfunction Users(props) {\r\n    return (\r\n        <div>\r\n            <h1>{props.name}</h1>\r\n            <p>UserId:{props.id}</p>\r\n            <p>UserName:{props.name}</p>\r\n            <p>City:{props.city}</p>\r\n            <p>Age{props.age}</p>\r\n        </div>\r\n    )\r\n}\r\nclass DataList extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            Users: [\r\n                { id: 1, Name: 'Vishal Devani', Age: '15', City: 'Amreli' },\r\n                { id: 2, Name: 'Devani Vishal', Age: '16', City: 'Amreli' },\r\n                { id: 3, Name: 'Mihir Shah', Age: '22', City: 'Ahmedavad' },\r\n            ], UsersId: 0,\r\n            isLoading: true\r\n        };\r\n    };\r\n\r\n    toggleUserHandler = (id) => {\r\n\r\n        this.setState({ UsersId: id })\r\n    }\r\n    componentDidMount() {\r\n\r\n        console.log(\"done\");\r\n\r\n        this.timerHandle = setTimeout(() => this.setState({ isLoading: false }), 2000);\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        let user = null\r\n        user =\r\n\r\n\r\n            <Container>\r\n                <div className={styles.secondDiv}>{\r\n\r\n                    this.state.Users.filter((user) => user.id === this.state.UsersId).map((user) => {\r\n                        return <Users\r\n                            key={user.id}\r\n                            name={user.Name}\r\n                            city={user.City}\r\n                            id={user.id}\r\n                            age={user.Age}\r\n                        />\r\n                    })\r\n                }\r\n                </div>\r\n            </Container>\r\n        //set spinner for 2 second before screen rendering\r\n        return (\r\n            this.state.isLoading ? <div className={styles.spinnerDiv}> <Spinner animation=\"border\" variant=\"primary\" />  Loading...</div> :\r\n                <div className={styles.mainDiv}>\r\n                    <Jumbotron fluid>\r\n                        <Container>\r\n                            {\r\n                                this.state.Users.map((user) =>\r\n                                    <UsersNameList\r\n                                        key={user.id}\r\n                                        name={user.Name}\r\n\r\n                                        click={() => this.toggleUserHandler(user.id)}\r\n                                    />\r\n                                )\r\n                            }\r\n                        </Container>\r\n                    </Jumbotron>\r\n                    {user}\r\n                </div>\r\n        );\r\n    }\r\n\r\n};\r\nexport default DataList;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport DataList from './Components/DataList'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nReactDOM.render(\r\n\r\n    <DataList/>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainDiv\":\"List_mainDiv__2g4M1\",\"firstDiv\":\"List_firstDiv__1fFJe\",\"secondDiv\":\"List_secondDiv__1LB8v\",\"spinnerDiv\":\"List_spinnerDiv__2n85J\"};","module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";"],"sourceRoot":""}